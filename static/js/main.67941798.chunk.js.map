{"version":3,"sources":["../../1-use-cases/create-projection/index.js","../../1-use-cases/read-scenario/index.js","../../0-domain/objects/scenario/index.js","../../1-use-cases/create-entry/index.js","../../1-use-cases/update-entry/index.js","Store/Storage/entry.js","Store/Storage/projection.js","Store/application.js","Store/financial-scenario.js","Store/index.js","Store/Storage/index.js","App/FinancialScenario/FixedValues/formarter.js","App/FinancialScenario/FixedValues/money.js","App/FinancialScenario/FixedValues/percentage.js","App/FinancialScenario/FixedValues/Entry/entry.visual.js","App/FinancialScenario/FixedValues/Entry/entry.data.js","App/FinancialScenario/FixedValues/Entry/index.js","App/FinancialScenario/FixedValues/fixed-values.visual.js","App/FinancialScenario/FixedValues/fixed-values.data.js","App/FinancialScenario/FixedValues/index.js","App/FinancialScenario/CreateEntryDialog/create-entry-dialog.visual.js","App/FinancialScenario/CreateEntryDialog/create-entry-dialog.state.js","App/FinancialScenario/CreateEntryDialog/create-entry-dialog.data.js","App/FinancialScenario/CreateEntryDialog/index.js","App/FinancialScenario/financial-scenario.visual.js","App/FinancialScenario/financial-scenario.data.js","App/FinancialScenario/index.js","App/app.visual.js","App/app.data.js","App/index.js","serviceWorker.js","index.js","../../0-domain/entities/projection/index.js","../../0-domain/entities/entry/index.js","../../2-adapters/gateways/storage/index.js","../../2-adapters/controllers/projection/create/index.js","../../2-adapters/controllers/scenario/read/index.js","../../2-adapters/controllers/entry/create/index.js","../../2-adapters/controllers/entry/update/index.js","../../2-adapters/gateways/storage/entry/index.js","../../2-adapters/gateways/storage/projection/index.js"],"names":["DEPENDENCIES","Projection","require","CreateProjection","storage","injection","this","create","bind","dependencies","presenter","result","projection","onStart","idlessEntity","entries","createProjection","onError","onEnd","module","exports","Entry","Scenario","CreateEntry","read","scenario","execute","call","async","readProjection","projectionId","onSuccess","readProjectionById","data","map","e","total","reduce","accumulator","value","isDisabled","array","entry","share","Object","assign","id","clone","raw","defineProperty","get","incoming","expenses","freeze","Promise","all","createEntry","addEntry","updateProjection","Error","UpdateEntry","update","entryId","payload","updateEntry","app","next","JSON","parse","localStorage","getItem","setItem","readAll","stringify","updated","timestamp","Date","now","btoa","Application","notifier","modules","start","key","Module","isStarting","hasStartingFailure","init","starts","values","instance","console","log","NotificationManager","error","decorate","observable","action","FinancialScenario","handleEntryCreation","handleToggleEntryDisabled","isLoading","readScenario","trial","a","Function","prototype","difference","projections","existingProjection","createFirstProjection","ReadScenario","title","application","Adapter","financialScenario","formarter","Intl","NumberFormat","format","x","toLocaleString","toFixed","Money","Number","isFinite","classes","money","Math","abs","text","push","className","join","Percentage","percentage","parseInt","source","onToggleDisabled","type","checked","onChange","EntryData","observer","model","props","Component","store","Group","name","Fragment","colSpan","FixedValues","FixedValuesData","onCreateEntry","CreateEntryDialog","isInvalid","onChangeSource","onChangeValue","onClose","onCreate","onKeyPress","useState","parseFloat","random","example","Dialog","open","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","placeholder","input","helperText","DialogActions","Button","onClick","color","disabled","INPUT","getSourceError","length","getValueError","quantity","setSource","setValue","handleCreation","target","focus","CreateEntryDialogData","isCreating","setIsCreating","FinancialScenarioData","Loading","Failure","Pages","onReadScenario","App","hasLoadingError","Content","AppData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","filter","errors","isNaN","storages","initSubstorages","container","substorages","storageName","Substorage","drive","oldValues","linkWithSubstorage","substorage","getOwnPropertyDescriptors","forEach","descriptor","containerForDrivers","UseCase","uc","oldEntries","driver","readEntryById","oldProjections"],"mappings":"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","file":"static/js/main.67941798.chunk.js","sourcesContent":["const DEPENDENCIES = {\n  Projection: require('my-domain/entities/projection')\n}\n\nclass CreateProjection {\n  constructor (storage, injection) {\n    this.create = this.create.bind({\n      storage,\n      dependencies: { ...DEPENDENCIES, ...injection }\n    })\n  }\n\n  async create (presenter) {\n    const { Projection } = this.dependencies\n    const result = { projection: null }\n\n    presenter.onStart()\n\n    try {\n      const idlessEntity = new Projection({ ...presenter.projection, entries: [] })\n\n      result.projection = await this.storage.createProjection(idlessEntity)\n    } catch (e) {\n      presenter.onError(e)\n    }\n\n    presenter.onEnd()\n\n    return result\n  }\n}\n\nmodule.exports = CreateProjection\n","const DEPENDENCIES = {\n  Entry: require('my-domain/entities/entry'),\n  Projection: require('my-domain/entities/projection'),\n  Scenario: require('my-domain/objects/scenario')\n}\n\nclass CreateEntry {\n  constructor (storage, injection) {\n    this.read = this.read.bind({\n      storage,\n      dependencies: { ...DEPENDENCIES, ...injection }\n    })\n  }\n\n  async read (presenter) {\n    const result = { scenario: null }\n\n    presenter.onStart()\n\n    try {\n      // mimic private method\n      result.scenario = await execute.call(this, presenter)\n    } catch (e) {\n      presenter.onError(e)\n    }\n\n    presenter.onEnd()\n\n    return result\n  }\n}\n\nasync function execute (presenter) {\n  const { Scenario } = this.dependencies\n\n  const projection = await readProjection.call(this, presenter.projectionId)\n\n  const scenario = new Scenario({ projection })\n\n  presenter.onSuccess(scenario)\n\n  return scenario\n}\n\nasync function readProjection (projectionId) {\n  const { Projection, Entry } = this.dependencies\n\n  const { entries, ...data } = await this.storage.readProjectionById(projectionId)\n\n  const projection = new Projection({ ...data, entries: entries.map(e => new Entry(e)) })\n\n  return projection\n}\n\nmodule.exports = CreateEntry\n","function Scenario (data) {\n  const { projection } = data\n\n  Object.assign(this, {\n    projectionId: projection.id,\n    clone (raw) {\n      return new Scenario({ ...data, ...raw })\n    }\n  })\n\n  Object.defineProperty(this, 'incoming', {\n    get () {\n      return read(projection.incoming)\n    }\n  })\n\n  Object.defineProperty(this, 'expenses', {\n    get () {\n      return read(projection.expenses)\n    }\n  })\n\n  Object.defineProperty(this, 'difference', {\n    get () {\n      return this.incoming.total + this.expenses.total\n    }\n  })\n\n  return Object.freeze(this)\n}\n\nfunction read (entries) {\n  const total = entries.reduce((accumulator, { value, isDisabled }) => {\n    if (isDisabled) return accumulator\n\n    return accumulator + value\n  }, 0)\n\n  return {\n    total,\n    entries: entries.reduce((array, entry) => [\n      ...array,\n      {\n        ...entry,\n        share: entry.isDisabled ? 0 : entry.share(total)\n      }\n    ], [])\n  }\n}\n\nmodule.exports = Scenario\n","const DEPENDENCIES = {\n  Entry: require('my-domain/entities/entry'),\n  Projection: require('my-domain/entities/projection')\n}\n\nclass CreateEntry {\n  constructor (storage, injection) {\n    this.create = this.create.bind({\n      storage,\n      dependencies: { ...DEPENDENCIES, ...injection }\n    })\n  }\n\n  async create (presenter) {\n    let result = { projection: null, entry: null }\n\n    presenter.onStart()\n\n    try {\n      // mimic private method\n      result = await execute.call(this, presenter)\n    } catch (e) {\n      presenter.onError(e)\n    }\n\n    presenter.onEnd()\n\n    return result\n  }\n}\n\nasync function execute ({ projectionId, entry: data }) {\n  const [projection, entry] = await Promise.all([\n    readProjection.call(this, projectionId),\n    createEntry.call(this, data)\n  ])\n\n  projection.addEntry(entry)\n\n  await this.storage.updateProjection(projection)\n\n  return { projection, entry }\n}\n\nasync function readProjection (projectionId) {\n  if (!projectionId) {\n    throw new Error('Cannot create an entry without projectionId')\n  }\n\n  const { Projection, Entry } = this.dependencies\n\n  const { entries, ...data } = await this.storage.readProjectionById(projectionId)\n\n  const projection = new Projection({ ...data, entries: entries.map(e => new Entry(e)) })\n\n  return projection\n}\n\nasync function createEntry (data) {\n  if (!data) {\n    throw new Error('Cannot create an entry without its data')\n  }\n\n  const { Entry } = this.dependencies\n\n  const idlessEntity = new Entry(data)\n\n  const entry = await this.storage.createEntry(idlessEntity)\n\n  return entry\n}\n\nmodule.exports = CreateEntry\n","const DEPENDENCIES = {\n  Entry: require('my-domain/entities/entry'),\n  Projection: require('my-domain/entities/projection')\n}\n\nclass UpdateEntry {\n  constructor (storage, injection) {\n    this.update = this.update.bind({\n      storage,\n      dependencies: { ...DEPENDENCIES, ...injection }\n    })\n  }\n\n  async update (presenter) {\n    let result = { entry: null }\n\n    presenter.onStart()\n\n    try {\n      // mimic private method\n      result = await execute.call(this, presenter)\n    } catch (e) {\n      presenter.onError(e)\n    }\n\n    presenter.onEnd()\n\n    return result\n  }\n}\n\nasync function execute ({ entryId: id, payload }) {\n  const entry = await this.storage.updateEntry({ id, ...payload })\n\n  return { entry }\n}\n\nmodule.exports = UpdateEntry\n","const app = {\n  nextEntryId () {\n    const next = JSON.parse(localStorage.getItem('my-money/app/nextEntryId') || 0) + 1\n    localStorage.setItem('my-money/app/nextEntryId', next)\n    return next\n  }\n}\n\nconst entry = {\n  async read ({ id }) {\n    const all = await this.readAll()\n\n    const data = all[id]\n\n    if (!data) return\n\n    return Object.assign({}, data)\n  },\n\n  async create (data) {\n    const entry = { ...data, id: app.nextEntryId() }\n\n    const all = await this.readAll()\n\n    if (all[entry.id]) return this.create(data)\n\n    all[entry.id] = entry\n\n    localStorage.setItem('my-money/entries', JSON.stringify(all))\n\n    return entry\n  },\n\n  async readAll () {\n    const all = localStorage.getItem('my-money/entries') || '{}'\n\n    return JSON.parse(all)\n  },\n\n  async update ({ id, ...payload }) {\n    const data = await this.read({ id })\n\n    if (!data) return\n\n    const all = await this.readAll()\n\n    const updated = { ...data, ...payload, id }\n\n    all[id] = updated\n\n    localStorage.setItem('my-money/entries', JSON.stringify(all))\n\n    return updated\n  }\n}\n\nexport default entry\n","const projection = {\n  async read ({ id }) {\n    const all = await this.readAll()\n\n    const data = all[id]\n\n    if (!data) return\n\n    return Object.assign({}, data)\n  },\n\n  async update ({ id, incoming, expenses }) {\n    const data = await this.read({ id })\n\n    if (!data) return\n\n    data.entries = [...incoming, ...expenses].map(entry => entry.id)\n\n    const all = await this.readAll()\n\n    all[id] = data\n\n    localStorage.setItem('my-money/projections', JSON.stringify(all))\n  },\n\n  async readAll () {\n    const all = localStorage.getItem('my-money/projections') || '{}'\n\n    return JSON.parse(all)\n  },\n\n  async create (data) {\n    const timestamp = Date.now()\n\n    const projection = {\n      ...data,\n      id: btoa(timestamp),\n      timestamp,\n      entries: []\n    }\n\n    const all = await this.readAll()\n\n    if (all[projection.id]) return this.create(data)\n\n    all[projection.id] = projection\n\n    localStorage.setItem('my-money/projections', JSON.stringify(all))\n\n    return projection\n  }\n}\n\nexport default projection\n","import { decorate, observable, action } from 'mobx'\nimport { NotificationManager } from 'react-notifications'\n\nclass Application {\n  isStarting: true;\n  hasStartingFailure: false;\n\n  constructor ({ storage, notifier, modules }) {\n    this.storage = storage\n    this.notifier = notifier\n\n    this.start = this.start.bind(this)\n\n    this.modules = Object.entries(modules)\n      .reduce((map, [key, Module]) => ({\n        ...map,\n        [key]: new Module(this)\n      }), {})\n  }\n\n  async start () {\n    this.isStarting = true\n    this.hasStartingFailure = false\n\n    try {\n      await this.storage.init()\n\n      const starts = Object.values(this.modules)\n        .map((instance) => instance.start())\n\n      await Promise.all(starts)\n    } catch (error) {\n      this.hasStartingFailure = true\n\n      console.log('error', error)\n      // NotificationManager should not be here\n      NotificationManager.error('Try again later', 'Initializing app failed', 5000)\n    }\n\n    this.isStarting = false\n  }\n}\ndecorate(Application, {\n  isStarting: observable,\n  hasStartingFailure: observable,\n  start: action\n})\n\nexport default Application\n","import { decorate, observable, action } from 'mobx'\nimport { NotificationManager } from 'react-notifications'\n\nimport CreateProjection from 'my-adapters/controllers/projection/create'\nimport ReadScenario from 'my-adapters/controllers/scenario/read'\nimport CreateEntry from 'my-adapters/controllers/entry/create'\nimport UpdateEntry from 'my-adapters/controllers/entry/update'\n\nclass FinancialScenario {\n  scenario: null;\n  isLoading: true;\n\n  constructor (app) {\n    this.app = app\n\n    const { create } = new CreateEntry(this.app)\n    const { update } = new UpdateEntry(this.app)\n\n    this.handleEntryCreation = this.handleEntryCreation.bind(this, create)\n    this.handleToggleEntryDisabled = this.handleToggleEntryDisabled.bind(this, update)\n  }\n\n  get incoming () {\n    return this.scenario ? this.scenario.incoming : {\n      total: 0,\n      entries: []\n    }\n  }\n\n  get expenses () {\n    return this.scenario ? this.scenario.expenses : {\n      total: 0,\n      entries: []\n    }\n  }\n\n  get difference () {\n    return this.scenario ? this.scenario.difference : 0\n  }\n\n  async start () {\n    this.isLoading = true\n\n    const projection = await readProjection.call(this)\n\n    await readScenario.call(this, projection)\n\n    this.isLoading = false\n  }\n\n  async handleEntryCreation (create, entry) {\n    if (!this.scenario) return\n\n    const trial = async () => {\n      await create({\n        onStart: Function.prototype,\n        onError: (e) => {\n          NotificationManager.error('Click here to retry', 'Creating entry failed', 5000, trial, true)\n          console.log(e)\n        },\n        onEnd: Function.prototype,\n        projectionId: this.scenario.projectionId,\n        entry\n      })\n\n      // TODO: use a better way to update\n      await this.start()\n    }\n\n    await trial()\n  }\n\n  async handleToggleEntryDisabled (update, entry) {\n    await update({\n      onStart: Function.prototype,\n      onError: (e) => {\n        NotificationManager.error('Toggling failed', 'Toggling failed failed', 5000)\n        console.log(e)\n      },\n      onEnd: Function.prototype,\n      entryId: entry.id,\n      payload: {\n        isDisabled: !entry.isDisabled\n      }\n    })\n\n    // TODO: use a better way to update\n    await this.start()\n  }\n}\ndecorate(FinancialScenario, {\n  scenario: observable,\n  isLoading: observable,\n  start: action,\n  handleEntryCreation: action\n})\n\nasync function readProjection () {\n  const { projections = [] } = this.app.storage\n\n  const [existingProjection] = projections\n\n  if (existingProjection) {\n    return existingProjection\n  }\n\n  const { projection } = await createFirstProjection.call(this)\n\n  return projection\n}\n\nasync function readScenario (projection) {\n  const { read } = new ReadScenario(this.app)\n\n  const { scenario } = await read({\n    onStart: Function.prototype,\n    onError: (e) => console.log('scenario', e),\n    onEnd: Function.prototype,\n    onSuccess: Function.prototype,\n    projectionId: projection.id\n  })\n\n  this.scenario = scenario\n}\n\nasync function createFirstProjection () {\n  const { create } = new CreateProjection(this.app)\n\n  return create({\n    projection: {\n      title: 'Standard'\n    },\n    onStart: Function.prototype,\n    onError: e => { throw e },\n    onEnd: Function.prototype\n  })\n}\n\nexport default FinancialScenario\n","import Storage from './Storage'\n\nimport Application from './application'\nimport FinancialScenario from './financial-scenario'\n\nconst application = new Application({\n  storage: Storage(),\n  notifier: {\n    onError (error) {\n      console.log('error', error)\n    }\n  },\n  modules: {\n    financialScenario: FinancialScenario\n  }\n})\n\napplication.start()\n\nconst data = {\n  application,\n  financialScenario: application.modules.financialScenario\n}\n\nexport default data\n","import Adapter from 'my-adapters/gateways/storage'\n\nimport entry from './entry'\nimport projection from './projection'\n\nexport default () => new Adapter({\n  entry,\n  projection\n})\n","const formarter = Intl && Intl.NumberFormat ? new Intl.NumberFormat() : {\n  format: (x) => x.toLocaleString ? x.toLocaleString() : x.toFixed(2)\n}\n\nexport default formarter\n","import React from 'react'\n\nimport formarter from './formarter'\n\nfunction Money ({ value }) {\n  if (!Number.isFinite(value)) {\n    return <Money value={0} />\n  }\n\n  const classes = ['financial__money']\n  const money = formarter.format(Math.abs(value))\n  const text = value >= 0 ? '$' : '($)'\n\n  if (value < 0) {\n    classes.push('financial__money--negative')\n  }\n\n  return (\n    <td className={classes.join(' ')}>\n      {text}{money}\n    </td>\n  )\n}\n\nexport default Money\n","import React from 'react'\n\nimport formarter from './formarter'\n\nfunction Percentage ({ value }) {\n  if (!Number.isFinite(value)) {\n    return <Percentage value={0} />\n  }\n\n  const classes = ['financial__percentage']\n  const percentage = parseInt((value * 100).toFixed(2), 10)\n\n  if (value < 0) {\n    classes.push('financial__percentage--negative')\n  }\n\n  return (\n    <td className={classes.join(' ')}>\n      {formarter.format(percentage)} %\n    </td>\n  )\n}\n\nexport default Percentage\n","import React from 'react'\n\nimport Money from '../money'\nimport Percentage from '../percentage'\n\nfunction Entry ({ id, source, value, isDisabled, share, onToggleDisabled }) {\n  const classes = ['financial__entry']\n\n  if (isDisabled) {\n    classes.push('financial__entry--disabled')\n  }\n\n  return (\n    <tr className={classes.join(' ')}>\n      <td>{source}</td>\n      <Money value={Math.abs(value)} />\n      <Percentage value={share} />\n      <td>\n        <input type=\"checkbox\" checked={isDisabled} onChange={() => onToggleDisabled({ id, isDisabled })} />\n      </td>\n    </tr>\n  )\n}\n\nexport default Entry\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport store from 'my-web/src/Store'\n\nimport Component from './entry.visual'\n\nconst EntryData = observer(({ model, ...props }) => {\n  return (\n    <Component\n      {...props}\n      onToggleDisabled={model.handleToggleEntryDisabled}\n    />\n  )\n})\n\nexport default (props) => <EntryData model={store.financialScenario} {...props} />\n","import Component from './entry.data'\n\nexport default Component\n","import React from 'react'\n\nimport Money from './money'\nimport Percentage from './percentage'\nimport Entry from './Entry'\n\nfunction FixedValues ({ incoming, expenses, difference }) {\n  return (\n    <table className=\"financial__values\">\n      <thead>\n        <tr>\n          <th colSpan=\"4\">Fixed Values</th>\n        </tr>\n        <tr>\n          <th>Source</th>\n          <th>Value</th>\n          <th>Share</th>\n          <th>Disabled?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th colSpan=\"4\">Incoming</th>\n        </tr>\n        <Group entries={incoming} name=\"In\" />\n      </tbody>\n      <tbody>\n        <tr>\n          <th colSpan=\"4\">Expenses</th>\n        </tr>\n        <Group entries={expenses} name=\"Out\" />\n      </tbody>\n      <tfoot>\n        <tr>\n          <th colSpan=\"2\">Yours</th>\n          <Money value={difference} />\n          <Percentage value={difference / incoming.total} />\n        </tr>\n      </tfoot>\n    </table>\n  )\n}\n\nfunction Group ({ entries: { entries, total }, name }) {\n  return (\n    <React.Fragment>\n      {entries.map((entry) => <Entry key={entry.id} {...entry} />)}\n      <tr>\n        <th colSpan=\"3\">{name}</th>\n        <Money value={Math.abs(total)} />\n      </tr>\n    </React.Fragment>\n  )\n}\n\nexport default FixedValues\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport store from 'my-web/src/Store'\n\nimport Component from './fixed-values.visual'\n\nconst FixedValuesData = observer(({ model }) => {\n  return (\n    <Component\n      incoming={model.incoming}\n      expenses={model.expenses}\n      difference={model.difference}\n      onCreateEntry={model.handleEntryCreation}\n    />\n  )\n})\n\nexport default () => <FixedValuesData model={store.financialScenario} />\n","import Component from './fixed-values.data'\n\nexport default Component\n","import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nfunction CreateEntryDialog ({ isInvalid, source, value, onChangeSource, onChangeValue, onClose, onCreate, onKeyPress }) {\n  // only a visual concern, kept as state to avoid changes on every rerender\n  const [example] = useState(`MY$ ${parseFloat((Math.random() * 100).toFixed(2))}`)\n\n  return (\n    <Dialog open onClose={onClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle>Create Entry</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          An entry is either an incoming or expense you have periodically.\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"source\"\n          label=\"Where is the money coming from / going to?\"\n          type=\"input\"\n          fullWidth\n          placeholder=\"salary, rent, etc\"\n          value={source.input}\n          onChange={onChangeSource}\n          error={!!source.error}\n          helperText={source.error}\n          onKeyPress={onKeyPress}\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"value\"\n          label=\"How much?\"\n          type=\"number\"\n          fullWidth\n          placeholder={example}\n          value={value.input}\n          onChange={onChangeValue}\n          error={!!value.error}\n          helperText={value.error || 'Always use the same currency and up to two decimal places'}\n          onKeyPress={onKeyPress}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onCreate} color=\"primary\" disabled={isInvalid}>\n          Create\n        </Button>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nexport default CreateEntryDialog\n","import React, { useState } from 'react'\n\nimport Component from './create-entry-dialog.visual'\n\nconst INPUT = {\n  input: '',\n  error: null\n}\n\nfunction getSourceError (source) {\n  if (source.length < 3) {\n    return 'Use at least 3 characters to describe the source'\n  }\n\n  if (source.length > 20) {\n    return 'Use at most 20 characters to describe the source'\n  }\n\n  return null\n}\n\nfunction getValueError (value) {\n  const quantity = parseFloat(value)\n\n  if (!Number.isFinite(quantity) || quantity === 0) {\n    return 'Use a non-neutral number'\n  }\n\n  return null\n}\n\nfunction CreateEntryDialog ({ onClose, onCreateEntry }) {\n  const [source, setSource] = useState(INPUT)\n  const [value, setValue] = useState(INPUT)\n\n  const handleSource = ({ target }) => {\n    const { value } = target\n\n    const error = getSourceError(value)\n\n    setSource({\n      input: value,\n      error,\n      target\n    })\n  }\n\n  const handleValue = ({ target: { value } }) => {\n    const error = getValueError(value)\n\n    setValue({\n      input: value,\n      error\n    })\n  }\n\n  const isInvalid = !!(getSourceError(source.input) || getValueError(value.input))\n\n  const handleCreation = async () => {\n    if (isInvalid) return\n\n    const entry = { source: source.input, value: value.input }\n\n    source.target.focus()\n\n    setSource(INPUT)\n    setValue(INPUT)\n\n    await onCreateEntry(entry)\n  }\n\n  const handleKeyPress = ({ key }) => {\n    if (key === 'Enter') {\n      handleCreation()\n    }\n  }\n\n  return (\n    <Component\n      isInvalid={isInvalid}\n      source={source}\n      value={value}\n      onChangeSource={handleSource}\n      onChangeValue={handleValue}\n      onKeyPress={handleKeyPress}\n      onClose={onClose}\n      onCreate={handleCreation}\n    />\n  )\n}\nexport default CreateEntryDialog\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport store from 'my-web/src/Store'\n\nimport Component from './create-entry-dialog.state'\n\nconst CreateEntryDialogData = observer(({ model, onClose }) => <Component onCreateEntry={model.handleEntryCreation} onClose={onClose} />)\n\nexport default ({ onClose }) => <CreateEntryDialogData model={store.financialScenario} onClose={onClose} />\n","import Component from './create-entry-dialog.data'\n\nexport default Component\n","import React, { useState } from 'react'\n\nimport FixedValues from './FixedValues'\nimport CreateEntryDialog from './CreateEntryDialog'\n\nimport './financial-scenario.css'\n\nfunction FinancialScenario ({ isLoading }) {\n  const [isCreating, setIsCreating] = useState(false)\n\n  if (isLoading) {\n    return <span>LOADING...</span>\n  }\n\n  return (\n    <React.Fragment>\n      <FixedValues />\n      <button className=\"financial__create-button\" onClick={() => setIsCreating(true)}>\n        Create Entry\n      </button>\n      {isCreating && <CreateEntryDialog onClose={() => setIsCreating(false)} />}\n    </React.Fragment>\n  )\n}\n\nexport default FinancialScenario\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport store from 'my-web/src/Store'\n\nimport Component from './financial-scenario.visual'\n\nconst FinancialScenarioData = observer(({ model }) => <Component isLoading={model.isLoading} />)\n\nexport default () => <FinancialScenarioData model={store.financialScenario} />\n","import Component from './financial-scenario.data'\n\nexport default Component\n","import React from 'react'\nimport { NotificationContainer } from 'react-notifications'\nimport './app.css'\nimport 'react-notifications/lib/notifications.css'\n\nimport FinancialScenario from './FinancialScenario'\n\nfunction App ({ isLoading, hasLoadingError, ...props }) {\n  const Content = isLoading ? Loading : (hasLoadingError ? Failure : Pages)\n\n  return (\n    <div className=\"App\">\n      <NotificationContainer/>\n      <main className=\"App-main\">\n        <Content {...props} />\n      </main>\n    </div>\n  )\n}\n\nfunction Loading () {\n  return (<span>LOADING...</span>)\n}\n\nfunction Failure () {\n  return (\n    <p>\n      The app is not working right now<br/>\n      Retry in a few minutes\n    </p>\n  )\n}\n\nfunction Pages ({ projection, onCreateEntry, onReadScenario }) {\n  return (\n    <React.Fragment>\n      <FinancialScenario\n        projection={projection}\n        onCreateEntry={onCreateEntry}\n        onReadScenario={onReadScenario}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport store from 'my-web/src/Store'\n\nimport Component from './app.visual'\n\nconst AppData = observer(({ app }) => {\n  return (\n    <Component\n      isLoading={app.isStarting}\n      hasLoadingError={app.hasStartingFailure}\n    />\n  )\n})\n\nexport default () => <AppData app={store.application} />\n","import Component from './app.data'\n\nexport default Component\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","function Projection ({ id, title, timestamp, entries }) {\n  Object.assign(this, {\n    id,\n    title,\n    timestamp,\n    addEntry (entry) {\n      entries.push(entry)\n    }\n  })\n\n  Object.defineProperty(this, 'incoming', {\n    get () {\n      return entries.filter(({ value }) => value > 0)\n    }\n  })\n\n  Object.defineProperty(this, 'expenses', {\n    get () {\n      return entries.filter(({ value }) => value < 0)\n    }\n  })\n\n  return Object.freeze(this)\n}\n\nmodule.exports = Projection\n","function Entry ({ id, source, value, isDisabled = false }) {\n  Object.assign(this, {\n    id,\n    source,\n    value: parseFloat(value),\n    isDisabled,\n    share (total) {\n      if (Math.abs(total) < Math.abs(value)) throw new Error('Share cannot be bigger than total')\n\n      return value / total\n    }\n  })\n\n  Object.defineProperty(this, 'errors', {\n    get () {\n      const errors = []\n\n      if (!value || (typeof value !== 'number' && !Number.isNaN(value))) {\n        errors.push(new Error('Invalid entry value'))\n      }\n\n      return errors\n    }\n  })\n\n  return Object.freeze(this)\n}\n\nmodule.exports = Entry\n","//  reading dynamically would prevent web apps from being developed =/\nconst DEPENDENCIES = {\n  storages: {\n    entry: require('./entry'),\n    projection: require('./projection')\n  }\n}\n\nfunction Storage (containerForDrivers, injection) {\n  const { storages } = { ...DEPENDENCIES, ...injection }\n\n  return {\n    async init () {\n      const substorages = await initSubstorages(containerForDrivers, storages)\n\n      substorages.forEach(linkWithSubstorage, this)\n    }\n  }\n}\n\nfunction initSubstorages (container, storages) {\n  const substorages = Object.entries(storages).map(async ([storageName, Substorage]) => {\n    const drive = container[storageName]\n\n    if (!drive) {\n      throw new Error(`A drive for ${storageName} was not found`)\n    }\n\n    const oldValues = await drive.readAll()\n\n    return new Substorage(oldValues, container)\n  })\n\n  return Promise.all(substorages)\n}\n\nfunction linkWithSubstorage (substorage) {\n  // TODO: prevent overwritte?\n  Object.assign(this, substorage)\n\n  // TODO: fix setters (and others)?\n  Object.entries(Object.getOwnPropertyDescriptors(substorage))\n    .filter(([key, descriptor]) => typeof descriptor.get === 'function')\n    .forEach(([key, descriptor]) => Object.defineProperty(this, key, descriptor))\n}\n\nmodule.exports = Storage\n","const DEPENDENCIES = {\n  UseCase: require('my-use-cases/create-projection')\n}\n\nfunction CreateProjectionController (app, injection) {\n  const { UseCase } = { ...DEPENDENCIES, ...injection }\n\n  const uc = new UseCase(app.storage)\n\n  Object.assign(this, {\n    create: (presenter) => {\n      try {\n        if (!presenter.projection) {\n          throw new Error('Projection has not been defined')\n        }\n\n        /*\n          take notice that even though it's technically possible to create a projection without title\n          it's not of this controller's interest to allow so\n        */\n        if (!presenter.projection.title) {\n          throw new Error('Projection cannot be created without a title')\n        }\n        /* end notice */\n\n        return uc.create(presenter)\n      } catch (error) {\n        presenter.onError(error)\n      }\n    }\n  })\n}\n\nmodule.exports = CreateProjectionController\n","const DEPENDENCIES = {\n  UseCase: require('my-use-cases/read-scenario')\n}\n\nfunction ReadScenarioController (app, injection) {\n  const { UseCase } = { ...DEPENDENCIES, ...injection }\n\n  const uc = new UseCase(app.storage)\n\n  Object.assign(this, {\n    read: (presenter) => {\n      try {\n        if (!presenter.projectionId) {\n          throw new Error('Projection has not id to be identified')\n        }\n\n        return uc.read(presenter)\n      } catch (error) {\n        presenter.onError(error)\n      }\n    }\n  })\n}\n\nmodule.exports = ReadScenarioController\n","const DEPENDENCIES = {\n  UseCase: require('my-use-cases/create-entry')\n}\n\nfunction CreateEntryController (app, injection) {\n  const { UseCase } = { ...DEPENDENCIES, ...injection }\n\n  const uc = new UseCase(app.storage)\n\n  Object.assign(this, {\n    create: (presenter) => {\n      try {\n        if (!presenter.projectionId) {\n          throw new Error('Projection has not id to be identified')\n        }\n\n        if (!presenter.entry) {\n          throw new Error('Entry has not been defined')\n        }\n\n        /*\n          take notice that even though it's technically possible to create an entry without source and value\n          it's not of this controller's interest to allow so\n        */\n        if (!presenter.entry.source) {\n          throw new Error('Entry cannot be created without a source')\n        }\n\n        if (!presenter.entry.value) {\n          throw new Error('Entry cannot be created without a value')\n        }\n        /* end notice */\n\n        return uc.create(presenter)\n      } catch (error) {\n        presenter.onError(error)\n      }\n    }\n  })\n}\n\nmodule.exports = CreateEntryController\n","const DEPENDENCIES = {\n  UseCase: require('my-use-cases/update-entry')\n}\n\nfunction UpdateEntryController (app, injection) {\n  const { UseCase } = { ...DEPENDENCIES, ...injection }\n\n  const uc = new UseCase(app.storage)\n\n  Object.assign(this, {\n    update: (presenter) => {\n      try {\n        if (!presenter.entryId) {\n          throw new Error('Entry has not id to be identified')\n        }\n\n        return uc.update(presenter)\n      } catch (error) {\n        presenter.onError(error)\n      }\n    }\n  })\n}\n\nmodule.exports = UpdateEntryController\n","function EntryStorage (oldEntries = {}, injection) {\n  const entries = oldEntries\n  const { entry: driver } = { ...injection }\n\n  Object.defineProperty(this, 'entries', {\n    get () {\n      return Object.values(entries)\n    }\n  })\n\n  return Object.assign(this, {\n    async readEntryById (id) {\n      if (!id) {\n        throw new Error('Missing ID when reading by ID')\n      }\n\n      const entry = await driver.read({ id })\n\n      entries[id] = entry\n\n      return entry\n    },\n    async createEntry (data) {\n      const entry = await driver.create(data)\n\n      entries[entry.id] = entry\n\n      return entry\n    },\n    async updateEntry (data) {\n      const entry = await driver.update(data)\n\n      entries[data.id] = entry\n\n      return entry\n    }\n  })\n}\n\nmodule.exports = EntryStorage\n","function ProjectionStorage (oldProjections = {}, injection) {\n  const projections = oldProjections\n  const { projection: driver } = { ...injection }\n\n  Object.defineProperty(this, 'projections', {\n    get () {\n      return Object.values(projections)\n    }\n  })\n\n  return Object.assign(this, {\n    async readProjectionById (id) {\n      if (!id) {\n        throw new Error('Missing ID when reading by ID')\n      }\n\n      const projection = await driver.read({ id })\n\n      if (projection) {\n        projection.entries = await Promise.all(projection.entries.map(this.readEntryById))\n      }\n\n      projections[id] = projection\n\n      return projection\n    },\n    async updateProjection (target) {\n      if (!target) {\n        throw new Error('Missing projection to update')\n      }\n\n      const projection = projections[target.id]\n\n      if (!projection) {\n        throw new Error('Unkown projection canot be updated')\n      }\n\n      await driver.update(target)\n\n      projections[target.id] = target\n    },\n    async createProjection (data) {\n      const projection = await driver.create(data)\n\n      projections[projection.id] = projection\n\n      return projection\n    }\n  })\n}\n\nmodule.exports = ProjectionStorage\n"],"sourceRoot":""}