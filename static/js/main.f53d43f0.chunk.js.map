{"version":3,"sources":["../../1-use-cases/create-projection/index.js","../../1-use-cases/read-scenario/index.js","../../0-domain/objects/scenario/index.js","../../1-use-cases/create-entry/index.js","Store/Storage/entry.js","Store/Storage/projection.js","Store/application.js","Store/financial-scenario.js","Store/index.js","Store/Storage/index.js","App/FinancialScenario/FixedValues/fixed-values.visual.js","App/FinancialScenario/FixedValues/index.js","App/FinancialScenario/CreateEntryDialog/create-entry-dialog.visual.js","App/FinancialScenario/CreateEntryDialog/create-entry-dialog.state.js","App/FinancialScenario/CreateEntryDialog/index.js","App/FinancialScenario/financial-scenario.visual.js","App/FinancialScenario/financial-scenario.data.js","App/FinancialScenario/index.js","App/app.visual.js","App/app.data.js","App/index.js","serviceWorker.js","index.js","../../0-domain/entities/projection/index.js","../../0-domain/entities/entry/index.js","../../2-adapters/gateways/storage/index.js","../../2-adapters/controllers/projection/create/index.js","../../2-adapters/controllers/scenario/read/index.js","../../2-adapters/controllers/entry/create/index.js","../../2-adapters/gateways/storage/entry/index.js","../../2-adapters/gateways/storage/projection/index.js"],"names":["DEPENDENCIES","Projection","require","CreateProjection","storage","injection","this","create","bind","dependencies","presenter","result","projection","onStart","idlessEntity","entries","createProjection","onError","onEnd","module","exports","Entry","Scenario","CreateEntry","read","scenario","execute","call","async","readProjection","projectionId","onSuccess","readProjectionById","data","map","e","total","reduce","number","value","array","entry","share","Object","assign","id","clone","raw","defineProperty","get","incoming","expenses","freeze","Promise","all","createEntry","addEntry","updateProjection","Error","app","next","JSON","parse","localStorage","getItem","setItem","readAll","stringify","update","timestamp","Date","now","btoa","Application","notifier","modules","start","key","Module","isStarting","hasStartingFailure","init","starts","values","instance","console","log","NotificationManager","error","decorate","observable","action","FinancialScenario","handleEntryCreation","readScenario","trial","a","Function","prototype","projections","existingProjection","createFirstProjection","ReadScenario","title","application","Adapter","financialScenario","formarter","Intl","NumberFormat","format","x","toLocaleString","toFixed","Group","name","Fragment","colSpan","Money","source","isDisabled","Percentage","type","checked","disabled","percentage","parseInt","Number","isNaN","money","Math","abs","FixedValues","Component","className","difference","CreateEntryDialog","isInvalid","onChangeSource","onChangeValue","onClose","onCreate","useState","parseFloat","random","example","Dialog","open","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","placeholder","input","onChange","helperText","DialogActions","Button","onClick","color","INPUT","getSourceError","length","getValueError","quantity","isFinite","onCreateEntry","setSource","setValue","target","focus","Loading","isCreateEntryDialogOpen","onOpenCreateEntryDialog","onCloseCreateEntryDialog","FinancialScenarioData","observer","model","setCreateEntryDialogOpen","store","Failure","Pages","onReadScenario","App","isLoading","hasLoadingError","props","Content","AppData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","filter","push","errors","storages","initSubstorages","container","substorages","storageName","Substorage","drive","oldValues","linkWithSubstorage","substorage","getOwnPropertyDescriptors","forEach","descriptor","containerForDrivers","UseCase","uc","oldEntries","driver","readEntryById","oldProjections"],"mappings":"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","file":"static/js/main.f53d43f0.chunk.js","sourcesContent":["const DEPENDENCIES = {\n  Projection: require('my-domain/entities/projection')\n}\n\nclass CreateProjection {\n  constructor (storage, injection) {\n    this.create = this.create.bind({\n      storage,\n      dependencies: { ...DEPENDENCIES, ...injection }\n    })\n  }\n\n  async create (presenter) {\n    const { Projection } = this.dependencies\n    const result = { projection: null }\n\n    presenter.onStart()\n\n    try {\n      const idlessEntity = new Projection({ ...presenter.projection, entries: [] })\n\n      result.projection = await this.storage.createProjection(idlessEntity)\n    } catch (e) {\n      presenter.onError(e)\n    }\n\n    presenter.onEnd()\n\n    return result\n  }\n}\n\nmodule.exports = CreateProjection\n","const DEPENDENCIES = {\n  Entry: require('my-domain/entities/entry'),\n  Projection: require('my-domain/entities/projection'),\n  Scenario: require('my-domain/objects/scenario')\n}\n\nclass CreateEntry {\n  constructor (storage, injection) {\n    this.read = this.read.bind({\n      storage,\n      dependencies: { ...DEPENDENCIES, ...injection }\n    })\n  }\n\n  async read (presenter) {\n    const result = { scenario: null }\n\n    presenter.onStart()\n\n    try {\n      // mimic private method\n      result.scenario = await execute.call(this, presenter)\n    } catch (e) {\n      presenter.onError(e)\n    }\n\n    presenter.onEnd()\n\n    return result\n  }\n}\n\nasync function execute (presenter) {\n  const { Scenario } = this.dependencies\n\n  const projection = await readProjection.call(this, presenter.projectionId)\n\n  const scenario = new Scenario({ projection })\n\n  presenter.onSuccess(scenario)\n\n  return scenario\n}\n\nasync function readProjection (projectionId) {\n  const { Projection, Entry } = this.dependencies\n\n  const { entries, ...data } = await this.storage.readProjectionById(projectionId)\n\n  const projection = new Projection({ ...data, entries: entries.map(e => new Entry(e)) })\n\n  return projection\n}\n\nmodule.exports = CreateEntry\n","function Scenario (data) {\n  const { projection } = data\n\n  Object.assign(this, {\n    projectionId: projection.id,\n    clone (raw) {\n      return new Scenario({ ...data, ...raw })\n    }\n  })\n\n  Object.defineProperty(this, 'incoming', {\n    get () {\n      return read(projection.incoming)\n    }\n  })\n\n  Object.defineProperty(this, 'expenses', {\n    get () {\n      return read(projection.expenses)\n    }\n  })\n\n  Object.defineProperty(this, 'difference', {\n    get () {\n      return this.incoming.total + this.expenses.total\n    }\n  })\n\n  return Object.freeze(this)\n}\n\nfunction read (entries) {\n  const total = entries.reduce((number, { value }) => number + value, 0)\n\n  return {\n    total,\n    entries: entries.reduce((array, entry) => [\n      ...array,\n      {\n        ...entry,\n        share: entry.share(total)\n      }\n    ], [])\n  }\n}\n\nmodule.exports = Scenario\n","const DEPENDENCIES = {\n  Entry: require('my-domain/entities/entry'),\n  Projection: require('my-domain/entities/projection')\n}\n\nclass CreateEntry {\n  constructor (storage, injection) {\n    this.create = this.create.bind({\n      storage,\n      dependencies: { ...DEPENDENCIES, ...injection }\n    })\n  }\n\n  async create (presenter) {\n    let result = { projection: null, entry: null }\n\n    presenter.onStart()\n\n    try {\n      // mimic private method\n      result = await execute.call(this, presenter)\n    } catch (e) {\n      presenter.onError(e)\n    }\n\n    presenter.onEnd()\n\n    return result\n  }\n}\n\nasync function execute ({ projectionId, entry: data }) {\n  const [projection, entry] = await Promise.all([\n    readProjection.call(this, projectionId),\n    createEntry.call(this, data)\n  ])\n\n  projection.addEntry(entry)\n\n  await this.storage.updateProjection(projection)\n\n  return { projection, entry }\n}\n\nasync function readProjection (projectionId) {\n  if (!projectionId) {\n    throw new Error('Cannot create an entry without projectionId')\n  }\n\n  const { Projection, Entry } = this.dependencies\n\n  const { entries, ...data } = await this.storage.readProjectionById(projectionId)\n\n  const projection = new Projection({ ...data, entries: entries.map(e => new Entry(e)) })\n\n  return projection\n}\n\nasync function createEntry (data) {\n  if (!data) {\n    throw new Error('Cannot create an entry without its data')\n  }\n\n  const { Entry } = this.dependencies\n\n  const idlessEntity = new Entry(data)\n\n  const entry = await this.storage.createEntry(idlessEntity)\n\n  return entry\n}\n\nmodule.exports = CreateEntry\n","const app = {\n  nextEntryId () {\n    const next = JSON.parse(localStorage.getItem('my-money/app/nextEntryId') || 0) + 1\n    localStorage.setItem('my-money/app/nextEntryId', next)\n    return next\n  }\n}\n\nconst entry = {\n  async read ({ id }) {\n    const all = await this.readAll()\n\n    const data = all[id]\n\n    if (!data) return\n\n    return Object.assign({}, data)\n  },\n\n  async create (data) {\n    const entry = { ...data, id: app.nextEntryId() }\n\n    const all = await this.readAll()\n\n    if (all[entry.id]) return this.create(data)\n\n    all[entry.id] = entry\n\n    localStorage.setItem('my-money/entries', JSON.stringify(all))\n\n    return entry\n  },\n\n  async readAll () {\n    const all = localStorage.getItem('my-money/entries') || '{}'\n\n    return JSON.parse(all)\n  }\n}\n\nexport default entry\n","const projection = {\n  async read ({ id }) {\n    const all = await this.readAll()\n\n    const data = all[id]\n\n    if (!data) return\n\n    return Object.assign({}, data)\n  },\n\n  async update ({ id, incoming, expenses }) {\n    const data = await this.read({ id })\n\n    if (!data) return\n\n    data.entries = [...incoming, ...expenses].map(entry => entry.id)\n\n    const all = await this.readAll()\n\n    all[id] = data\n\n    localStorage.setItem('my-money/projections', JSON.stringify(all))\n  },\n\n  async readAll () {\n    const all = localStorage.getItem('my-money/projections') || '{}'\n\n    return JSON.parse(all)\n  },\n\n  async create (data) {\n    const timestamp = Date.now()\n\n    const projection = {\n      ...data,\n      id: btoa(timestamp),\n      timestamp,\n      entries: []\n    }\n\n    const all = await this.readAll()\n\n    if (all[projection.id]) return this.create(data)\n\n    all[projection.id] = projection\n\n    localStorage.setItem('my-money/projections', JSON.stringify(all))\n\n    return projection\n  }\n}\n\nexport default projection\n","import { decorate, observable, action } from 'mobx'\nimport { NotificationManager } from 'react-notifications'\n\nclass Application {\n  isStarting: true;\n  hasStartingFailure: false;\n\n  constructor ({ storage, notifier, modules }) {\n    this.storage = storage\n    this.notifier = notifier\n\n    this.start = this.start.bind(this)\n\n    this.modules = Object.entries(modules)\n      .reduce((map, [key, Module]) => ({\n        ...map,\n        [key]: new Module(this)\n      }), {})\n  }\n\n  async start () {\n    this.isStarting = true\n    this.hasStartingFailure = false\n\n    try {\n      await this.storage.init()\n\n      const starts = Object.values(this.modules)\n        .map((instance) => instance.start())\n\n      await Promise.all(starts)\n    } catch (error) {\n      this.hasStartingFailure = true\n\n      console.log('error', error)\n      // NotificationManager should not be here\n      NotificationManager.error('Try again later', 'Initializing app failed', 5000)\n    }\n\n    this.isStarting = false\n  }\n}\ndecorate(Application, {\n  isStarting: observable,\n  hasStartingFailure: observable,\n  start: action\n})\n\nexport default Application\n","import { decorate, observable, action } from 'mobx'\nimport { NotificationManager } from 'react-notifications'\n\nimport CreateProjection from 'my-adapters/controllers/projection/create'\nimport ReadScenario from 'my-adapters/controllers/scenario/read'\nimport CreateEntry from 'my-adapters/controllers/entry/create'\n\nclass FinancialScenario {\n  scenario: null;\n\n  constructor (app) {\n    this.app = app\n\n    this.handleEntryCreation = this.handleEntryCreation.bind(this)\n  }\n\n  async start () {\n    const projection = await readProjection.call(this)\n\n    await readScenario.call(this, projection)\n  }\n\n  async handleEntryCreation (entry) {\n    if (!this.scenario) return\n\n    const { create } = new CreateEntry(this.app)\n\n    const trial = async () => {\n      const { projection } = await create({\n        onStart: Function.prototype,\n        onError: (e) => {\n          NotificationManager.error('Click here to retry', 'Creating entry failed', 5000, trial, true)\n          console.log(e)\n        },\n        onEnd: Function.prototype,\n        projectionId: this.scenario.projectionId,\n        entry\n      })\n\n      this.scenario = this.scenario.clone({ projection })\n    }\n\n    await trial()\n  }\n}\ndecorate(FinancialScenario, {\n  scenario: observable,\n  start: action,\n  handleEntryCreation: action\n})\n\nasync function readProjection () {\n  const { projections = [] } = this.app.storage\n\n  const [existingProjection] = projections\n\n  if (existingProjection) {\n    return existingProjection\n  }\n\n  const { projection } = await createFirstProjection.call(this)\n\n  return projection\n}\n\nasync function readScenario (projection) {\n  const { read } = new ReadScenario(this.app)\n\n  const { scenario } = await read({\n    onStart: Function.prototype,\n    onError: (e) => console.log('scenario', e),\n    onEnd: Function.prototype,\n    onSuccess: Function.prototype,\n    projectionId: projection.id\n  })\n\n  this.scenario = scenario\n}\n\nasync function createFirstProjection () {\n  const { create } = new CreateProjection(this.app)\n\n  return create({\n    projection: {\n      title: 'Standard'\n    },\n    onStart: Function.prototype,\n    onError: e => { throw e },\n    onEnd: Function.prototype\n  })\n}\n\nexport default FinancialScenario\n","import Storage from './Storage'\n\nimport Application from './application'\nimport FinancialScenario from './financial-scenario'\n\nconst application = new Application({\n  storage: Storage(),\n  notifier: {\n    onError (error) {\n      console.log('error', error)\n    }\n  },\n  modules: {\n    financialScenario: FinancialScenario\n  }\n})\n\napplication.start()\n\nconst data = {\n  application,\n  financialScenario: application.modules.financialScenario\n}\n\nexport default data\n","import Adapter from 'my-adapters/gateways/storage'\n\nimport entry from './entry'\nimport projection from './projection'\n\nexport default () => new Adapter({\n  entry,\n  projection\n})\n","import React from 'react'\n\nconst formarter = Intl && Intl.NumberFormat ? new Intl.NumberFormat() : {\n  format: (x) => x.toLocaleString ? x.toLocaleString() : x.toFixed(2)\n}\n\nfunction FixedValues ({ scenario }) {\n  return (\n    <table className=\"financial__values\">\n      <thead>\n        <tr>\n          <th colSpan=\"4\">Fixed Values</th>\n        </tr>\n        <tr>\n          <th>Source</th>\n          <th>Value</th>\n          <th>Share</th>\n          <th>Disabled?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th colSpan=\"4\">Incoming</th>\n        </tr>\n        <Group entries={scenario.incoming} name=\"In\" />\n      </tbody>\n      <tbody>\n        <tr>\n          <th colSpan=\"4\">Expenses</th>\n        </tr>\n        <Group entries={scenario.expenses} name=\"Out\" />\n      </tbody>\n      <tfoot>\n        <tr>\n          <th colSpan=\"2\">Yours</th>\n          <Money value={scenario.difference} />\n          <Percentage value={scenario.difference / scenario.incoming.total} />\n        </tr>\n      </tfoot>\n    </table>\n  )\n}\n\nfunction Group ({ entries: { entries, total }, name }) {\n  return (\n    <React.Fragment>\n      {entries.map(Entry)}\n      <tr>\n        <th colSpan=\"3\">{name}</th>\n        <Money value={total} />\n      </tr>\n    </React.Fragment>\n  )\n}\n\nfunction Entry ({ id, source, value, isDisabled, share }) {\n  return (\n    <tr key={id}>\n      <td>{source}</td>\n      <Money value={value} />\n      <Percentage value={share} />\n      <td>\n        <input type=\"checkbox\" checked={isDisabled} disabled />\n      </td>\n    </tr>\n  )\n}\n\nfunction Percentage ({ value }) {\n  const percentage = parseInt((value * 100).toFixed(2), 10)\n\n  return (\n    <td>\n      {Number.isNaN(percentage) ? 0 : formarter.format(percentage)} %\n    </td>\n  )\n}\n\nfunction Money ({ value }) {\n  const money = formarter.format(Math.abs(value))\n\n  return (\n    <td>\n      ${Number.isNaN(money) ? 0 : money}\n    </td>\n  )\n}\n\nexport default FixedValues\n","import Component from './fixed-values.visual'\n\nexport default Component\n","import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nfunction CreateEntryDialog ({ isInvalid, source, value, onChangeSource, onChangeValue, onClose, onCreate }) {\n  // only a visual concern, kept as state to avoid changes on every rerender\n  const [example] = useState(`MY$ ${parseFloat((Math.random() * 100).toFixed(2))}`)\n\n  return (\n    <Dialog open onClose={onClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle>Create Entry</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          An entry is either an incoming or expense you have periodically.\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"source\"\n          label=\"Where is the money coming from / going to?\"\n          type=\"input\"\n          fullWidth\n          placeholder=\"salary, rent, etc\"\n          value={source.input}\n          onChange={onChangeSource}\n          error={!!source.error}\n          helperText={source.error}\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"value\"\n          label=\"How much?\"\n          type=\"number\"\n          fullWidth\n          placeholder={example}\n          value={value.input}\n          onChange={onChangeValue}\n          error={!!value.error}\n          helperText={value.error || 'Always use the same currency and up to two decimal places'}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onCreate} color=\"primary\" disabled={isInvalid}>\n          Create\n        </Button>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nexport default CreateEntryDialog\n","import React, { useState } from 'react'\n\nimport Component from './create-entry-dialog.visual'\n\nconst INPUT = {\n  input: '',\n  error: null\n}\n\nfunction getSourceError (source) {\n  if (source.length < 3) {\n    return 'Use at least 3 characters to describe the source'\n  }\n\n  if (source.length > 20) {\n    return 'Use at most 20 characters to describe the source'\n  }\n\n  return null\n}\n\nfunction getValueError (value) {\n  const quantity = parseFloat(value)\n\n  if (!Number.isFinite(quantity) || quantity === 0) {\n    return 'Use a non-neutral number'\n  }\n\n  return null\n}\n\nfunction CreateEntryDialog ({ onClose, onCreateEntry }) {\n  const [source, setSource] = useState(INPUT)\n  const [value, setValue] = useState(INPUT)\n\n  const handleSource = ({ target }) => {\n    const { value } = target\n\n    const error = getSourceError(value)\n\n    setSource({\n      input: value,\n      error,\n      target\n    })\n  }\n\n  const handleValue = ({ target: { value } }) => {\n    const error = getValueError(value)\n\n    setValue({\n      input: value,\n      error\n    })\n  }\n\n  const isInvalid = !!(getSourceError(source.input) || getValueError(value.input))\n\n  const handleCreation = async () => {\n    const entry = { source: source.input, value: value.input }\n\n    source.target.focus()\n\n    setSource(INPUT)\n    setValue(INPUT)\n\n    await onCreateEntry(entry)\n  }\n\n  return (\n    <Component\n      isInvalid={isInvalid}\n      source={source}\n      value={value}\n      onChangeSource={handleSource}\n      onChangeValue={handleValue}\n      onClose={onClose}\n      onCreate={handleCreation}\n    />\n  )\n}\nexport default CreateEntryDialog\n","import Component from './create-entry-dialog.state'\n\nexport default Component\n","import React from 'react'\n\nimport FixedValues from './FixedValues'\nimport CreateEntryDialog from './CreateEntryDialog'\n\nimport './financial-scenario.css'\n\nfunction FinancialScenario ({\n  scenario,\n  isCreateEntryDialogOpen,\n  onOpenCreateEntryDialog,\n  onCloseCreateEntryDialog,\n  onCreateEntry\n}) {\n  if (!scenario) {\n    return <Loading />\n  }\n\n  return (\n    <React.Fragment>\n      <FixedValues scenario={scenario} />\n      <button className=\"financial__create-button\" onClick={onOpenCreateEntryDialog}>\n        Create Entry\n      </button>\n      {isCreateEntryDialogOpen && <CreateEntryDialog onClose={onCloseCreateEntryDialog} onCreateEntry={onCreateEntry} />}\n    </React.Fragment>\n  )\n}\n\nfunction Loading () {\n  return (<span>LOADING...</span>)\n}\n\nexport default FinancialScenario\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport store from 'my-web/src/Store'\n\nimport Component from './financial-scenario.visual'\n\nconst FinancialScenarioData = observer(({ model }) => {\n  const [isCreateEntryDialogOpen, setCreateEntryDialogOpen] = useState(false)\n\n  return (\n    <Component\n      scenario={model.scenario}\n      isCreateEntryDialogOpen={isCreateEntryDialogOpen}\n      onOpenCreateEntryDialog={() => setCreateEntryDialogOpen(true)}\n      onCloseCreateEntryDialog={() => setCreateEntryDialogOpen(false)}\n      onCreateEntry={model.handleEntryCreation}\n    />\n  )\n})\n\nexport default () => <FinancialScenarioData model={store.financialScenario} />\n","import Component from './financial-scenario.data'\n\nexport default Component\n","import React from 'react'\nimport { NotificationContainer } from 'react-notifications'\nimport './app.css'\nimport 'react-notifications/lib/notifications.css'\n\nimport FinancialScenario from './FinancialScenario'\n\nfunction App ({ isLoading, hasLoadingError, ...props }) {\n  const Content = isLoading ? Loading : (hasLoadingError ? Failure : Pages)\n\n  return (\n    <div className=\"App\">\n      <NotificationContainer/>\n      <main className=\"App-main\">\n        <Content {...props} />\n      </main>\n    </div>\n  )\n}\n\nfunction Loading () {\n  return (<span>LOADING...</span>)\n}\n\nfunction Failure () {\n  return (\n    <p>\n      The app is not working right now<br/>\n      Retry in a few minutes\n    </p>\n  )\n}\n\nfunction Pages ({ projection, onCreateEntry, onReadScenario }) {\n  return (\n    <React.Fragment>\n      <FinancialScenario\n        projection={projection}\n        onCreateEntry={onCreateEntry}\n        onReadScenario={onReadScenario}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport store from 'my-web/src/Store'\n\nimport Component from './app.visual'\n\nconst AppData = observer(({ app }) => {\n  return (\n    <Component\n      isLoading={app.isStarting}\n      hasLoadingError={app.hasStartingFailure}\n    />\n  )\n})\n\nexport default () => <AppData app={store.application} />\n","import Component from './app.data'\n\nexport default Component\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","function Projection ({ id, title, timestamp, entries: rawEntries }) {\n  const entries = rawEntries.filter(({ isDisabled }) => !isDisabled)\n\n  Object.assign(this, {\n    id,\n    title,\n    timestamp,\n    addEntry (entry) {\n      if (entry.isDisabled) return\n\n      entries.push(entry)\n    }\n  })\n\n  Object.defineProperty(this, 'incoming', {\n    get () {\n      return entries.filter(({ value }) => value > 0)\n    }\n  })\n\n  Object.defineProperty(this, 'expenses', {\n    get () {\n      return entries.filter(({ value }) => value < 0)\n    }\n  })\n\n  return Object.freeze(this)\n}\n\nmodule.exports = Projection\n","function Entry ({ id, source, value, isDisabled = false }) {\n  Object.assign(this, {\n    id,\n    source,\n    value: parseFloat(value),\n    isDisabled,\n    share (total) {\n      if (Math.abs(total) < Math.abs(value)) throw new Error('Share cannot be bigger than total')\n\n      return value / total\n    }\n  })\n\n  Object.defineProperty(this, 'errors', {\n    get () {\n      const errors = []\n\n      if (!value || (typeof value !== 'number' && !Number.isNaN(value))) {\n        errors.push(new Error('Invalid entry value'))\n      }\n\n      return errors\n    }\n  })\n\n  return Object.freeze(this)\n}\n\nmodule.exports = Entry\n","//  reading dynamically would prevent web apps from being developed =/\nconst DEPENDENCIES = {\n  storages: {\n    entry: require('./entry'),\n    projection: require('./projection')\n  }\n}\n\nfunction Storage (containerForDrivers, injection) {\n  const { storages } = { ...DEPENDENCIES, ...injection }\n\n  return {\n    async init () {\n      const substorages = await initSubstorages(containerForDrivers, storages)\n\n      substorages.forEach(linkWithSubstorage, this)\n    }\n  }\n}\n\nfunction initSubstorages (container, storages) {\n  const substorages = Object.entries(storages).map(async ([storageName, Substorage]) => {\n    const drive = container[storageName]\n\n    if (!drive) {\n      throw new Error(`A drive for ${storageName} was not found`)\n    }\n\n    const oldValues = await drive.readAll()\n\n    return new Substorage(oldValues, container)\n  })\n\n  return Promise.all(substorages)\n}\n\nfunction linkWithSubstorage (substorage) {\n  // TODO: prevent overwritte?\n  Object.assign(this, substorage)\n\n  // TODO: fix setters (and others)?\n  Object.entries(Object.getOwnPropertyDescriptors(substorage))\n    .filter(([key, descriptor]) => typeof descriptor.get === 'function')\n    .forEach(([key, descriptor]) => Object.defineProperty(this, key, descriptor))\n}\n\nmodule.exports = Storage\n","const DEPENDENCIES = {\n  UseCase: require('my-use-cases/create-projection')\n}\n\nfunction CreateProjectionController (app, injection) {\n  const { UseCase } = { ...DEPENDENCIES, ...injection }\n\n  const uc = new UseCase(app.storage)\n\n  Object.assign(this, {\n    create: (presenter) => {\n      try {\n        if (!presenter.projection) {\n          throw new Error('Projection has not been defined')\n        }\n\n        /*\n          take notice that even though it's technically possible to create a projection without title\n          it's not of this controller's interest to allow so\n        */\n        if (!presenter.projection.title) {\n          throw new Error('Projection cannot be created without a title')\n        }\n        /* end notice */\n\n        return uc.create(presenter)\n      } catch (error) {\n        presenter.onError(error)\n      }\n    }\n  })\n}\n\nmodule.exports = CreateProjectionController\n","const DEPENDENCIES = {\n  UseCase: require('my-use-cases/read-scenario')\n}\n\nfunction ReadScenarioController (app, injection) {\n  const { UseCase } = { ...DEPENDENCIES, ...injection }\n\n  const uc = new UseCase(app.storage)\n\n  Object.assign(this, {\n    read: (presenter) => {\n      try {\n        if (!presenter.projectionId) {\n          throw new Error('Projection has not id to be identified')\n        }\n\n        return uc.read(presenter)\n      } catch (error) {\n        presenter.onError(error)\n      }\n    }\n  })\n}\n\nmodule.exports = ReadScenarioController\n","const DEPENDENCIES = {\n  UseCase: require('my-use-cases/create-entry')\n}\n\nfunction CreateEntryController (app, injection) {\n  const { UseCase } = { ...DEPENDENCIES, ...injection }\n\n  const uc = new UseCase(app.storage)\n\n  Object.assign(this, {\n    create: (presenter) => {\n      try {\n        if (!presenter.projectionId) {\n          throw new Error('Projection has not id to be identified')\n        }\n\n        if (!presenter.entry) {\n          throw new Error('Entry has not been defined')\n        }\n\n        /*\n          take notice that even though it's technically possible to create an entry without source and value\n          it's not of this controller's interest to allow so\n        */\n        if (!presenter.entry.source) {\n          throw new Error('Entry cannot be created without a source')\n        }\n\n        if (!presenter.entry.value) {\n          throw new Error('Entry cannot be created without a value')\n        }\n        /* end notice */\n\n        return uc.create(presenter)\n      } catch (error) {\n        presenter.onError(error)\n      }\n    }\n  })\n}\n\nmodule.exports = CreateEntryController\n","function EntryStorage (oldEntries = {}, injection) {\n  const entries = oldEntries\n  const { entry: driver } = { ...injection }\n\n  Object.defineProperty(this, 'entries', {\n    get () {\n      return Object.values(entries)\n    }\n  })\n\n  return Object.assign(this, {\n    async readEntryById (id) {\n      if (!id) {\n        throw new Error('Missing ID when reading by ID')\n      }\n\n      const entry = await driver.read({ id })\n\n      entries[id] = entry\n\n      return entry\n    },\n    async createEntry (data) {\n      const entry = await driver.create(data)\n\n      entries[entry.id] = entry\n\n      return entry\n    }\n  })\n}\n\nmodule.exports = EntryStorage\n","function ProjectionStorage (oldProjections = {}, injection) {\n  const projections = oldProjections\n  const { projection: driver } = { ...injection }\n\n  Object.defineProperty(this, 'projections', {\n    get () {\n      return Object.values(projections)\n    }\n  })\n\n  return Object.assign(this, {\n    async readProjectionById (id) {\n      if (!id) {\n        throw new Error('Missing ID when reading by ID')\n      }\n\n      const projection = await driver.read({ id })\n\n      if (projection) {\n        projection.entries = await Promise.all(projection.entries.map(this.readEntryById))\n      }\n\n      projections[id] = projection\n\n      return projection\n    },\n    async updateProjection (target) {\n      if (!target) {\n        throw new Error('Missing projection to update')\n      }\n\n      const projection = projections[target.id]\n\n      if (!projection) {\n        throw new Error('Unkown projection canot be updated')\n      }\n\n      await driver.update(target)\n\n      projections[target.id] = target\n    },\n    async createProjection (data) {\n      const projection = await driver.create(data)\n\n      projections[projection.id] = projection\n\n      return projection\n    }\n  })\n}\n\nmodule.exports = ProjectionStorage\n"],"sourceRoot":""}